/** @file chaincmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CHAINCMDLINE_H
#define CHAINCMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "chain"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "chain"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "v1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *full_help_help; /**< @brief Print help, including hidden options, and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * statistic_arg;	/**< @brief statistical test (default='rootep').  */
  char * statistic_orig;	/**< @brief statistical test original value given at command line.  */
  const char *statistic_help; /**< @brief statistical test help description.  */
  #if defined(HAVE_LONG_LONG) || defined(HAVE_LONG_LONG_INT)
  long long int steps_arg;	/**< @brief do 2^n steps.  */
  #else
  long steps_arg;	/**< @brief do 2^n steps.  */
  #endif
  char * steps_orig;	/**< @brief do 2^n steps original value given at command line.  */
  const char *steps_help; /**< @brief do 2^n steps help description.  */
  int numdists_arg;	/**< @brief number of districts (default='7').  */
  char * numdists_orig;	/**< @brief number of districts original value given at command line.  */
  const char *numdists_help; /**< @brief number of districts help description.  */
  char * filename_arg;	/**< @brief name of district file.  */
  char * filename_orig;	/**< @brief name of district file original value given at command line.  */
  const char *filename_help; /**< @brief name of district file help description.  */
  int period_arg;	/**< @brief 2^d is period for output (default='22').  */
  char * period_orig;	/**< @brief 2^d is period for output original value given at command line.  */
  const char *period_help; /**< @brief 2^d is period for output help description.  */
  int only_end_flag;	/**< @brief only output final results (default=off).  */
  const char *only_end_help; /**< @brief only output final results help description.  */
  int variance_flag;	/**< @brief report variance statistics (default=off).  */
  const char *variance_help; /**< @brief report variance statistics help description.  */
  int median_mean_flag;	/**< @brief report median/mean test statistics (default=off).  */
  const char *median_mean_help; /**< @brief report median/mean test statistics help description.  */
  int partisan_bias_flag;	/**< @brief report partisan bias test statistics (default=off).  */
  const char *partisan_bias_help; /**< @brief report partisan bias test statistics help description.  */
  int BG_uniform_flag;	/**< @brief report uniform geometric bias test statistics (default=off).  */
  const char *BG_uniform_help; /**< @brief report uniform geometric bias test statistics help description.  */
  int BG_modified_flag;	/**< @brief report modified geometric bias test statistics (default=off).  */
  const char *BG_modified_help; /**< @brief report modified geometric bias test statistics help description.  */
  int seat_slide_flag;	/**< @brief report seat-slide test statistics (default=off).  */
  const char *seat_slide_help; /**< @brief report seat-slide test statistics help description.  */
  int efficiency_gap_flag;	/**< @brief report efficiency gap test statistics (default=off).  */
  const char *efficiency_gap_help; /**< @brief report efficiency gap test statistics help description.  */
  int seats_flag;	/**< @brief report seat count test statistics (default=off).  */
  const char *seats_help; /**< @brief report seat count test statistics help description.  */
  int histogram_flag;	/**< @brief output seat count histogram [HEURISTIC] (default=off).  */
  const char *histogram_help; /**< @brief output seat count histogram [HEURISTIC] help description.  */
  int* freeze_arg;	/**< @brief list of districts to leave unchanged (e.g., for existing M/M districts).  */
  char ** freeze_orig;	/**< @brief list of districts to leave unchanged (e.g., for existing M/M districts) original value given at command line.  */
  unsigned int freeze_min; /**< @brief list of districts to leave unchanged (e.g., for existing M/M districts)'s minimum occurreces */
  unsigned int freeze_max; /**< @brief list of districts to leave unchanged (e.g., for existing M/M districts)'s maximum occurreces */
  const char *freeze_help; /**< @brief list of districts to leave unchanged (e.g., for existing M/M districts) help description.  */
  int counties_flag;	/**< @brief preserve any counties currently belonging to a unique district (default=off).  */
  const char *counties_help; /**< @brief preserve any counties currently belonging to a unique district help description.  */
  float poperror_arg;	/**< @brief population percent error allowed (default='.02').  */
  char * poperror_orig;	/**< @brief population percent error allowed original value given at command line.  */
  const char *poperror_help; /**< @brief population percent error allowed help description.  */
  float perimeter_arg;	/**< @brief districting perimeter threshold.  */
  char * perimeter_orig;	/**< @brief districting perimeter threshold original value given at command line.  */
  const char *perimeter_help; /**< @brief districting perimeter threshold help description.  */
  float polsby_popper_arg;	/**< @brief Polsby-Popper compactness threshold.  */
  char * polsby_popper_orig;	/**< @brief Polsby-Popper compactness threshold original value given at command line.  */
  const char *polsby_popper_help; /**< @brief Polsby-Popper compactness threshold help description.  */
  float L1_compactness_arg;	/**< @brief threshold for sum of Polsby-Popper values.  */
  char * L1_compactness_orig;	/**< @brief threshold for sum of Polsby-Popper values original value given at command line.  */
  const char *L1_compactness_help; /**< @brief threshold for sum of Polsby-Popper values help description.  */
  float L2_compactness_arg;	/**< @brief threshold for L2 norm of Polsby-Popper values.  */
  char * L2_compactness_orig;	/**< @brief threshold for L2 norm of Polsby-Popper values original value given at command line.  */
  const char *L2_compactness_help; /**< @brief threshold for L2 norm of Polsby-Popper values help description.  */
  char * inputsvg_filename_arg;	/**< @brief filename of svg input (default='input.svg').  */
  char * inputsvg_filename_orig;	/**< @brief filename of svg input original value given at command line.  */
  const char *inputsvg_filename_help; /**< @brief filename of svg input help description.  */
  char * svg_filename_arg;	/**< @brief svg filename (default='districting').  */
  char * svg_filename_orig;	/**< @brief svg filename original value given at command line.  */
  const char *svg_filename_help; /**< @brief svg filename help description.  */
  char * precinct_filename_arg;	/**< @brief precinct filename (default='OutputPA').  */
  char * precinct_filename_orig;	/**< @brief precinct filename original value given at command line.  */
  const char *precinct_filename_help; /**< @brief precinct filename help description.  */
  int svg_firstline_arg;	/**< @brief first rgb line of input.svg (default='20').  */
  char * svg_firstline_orig;	/**< @brief first rgb line of input.svg original value given at command line.  */
  const char *svg_firstline_help; /**< @brief first rgb line of input.svg help description.  */
  int stages_flag;	/**< @brief output files for intermediate stages (default=off).  */
  const char *stages_help; /**< @brief output files for intermediate stages help description.  */
  int flip_flag;	/**< @brief flip A/B party correspondence (default=off).  */
  const char *flip_help; /**< @brief flip A/B party correspondence help description.  */
  int threads_arg;	/**< @brief number of threads to use (starsplit branches).  */
  char * threads_orig;	/**< @brief number of threads to use (starsplit branches) original value given at command line.  */
  const char *threads_help; /**< @brief number of threads to use (starsplit branches) help description.  */
  int branches_arg;	/**< @brief 2^b is number of branches to use for GCparallel (default='8').  */
  char * branches_orig;	/**< @brief 2^b is number of branches to use for GCparallel original value given at command line.  */
  const char *branches_help; /**< @brief 2^b is number of branches to use for GCparallel help description.  */
  int seed_arg;	/**< @brief seed offset (for benchmarking) (default='0').  */
  char * seed_orig;	/**< @brief seed offset (for benchmarking) original value given at command line.  */
  const char *seed_help; /**< @brief seed offset (for benchmarking) help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int full_help_given ;	/**< @brief Whether full-help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int statistic_given ;	/**< @brief Whether statistic was given.  */
  unsigned int steps_given ;	/**< @brief Whether steps was given.  */
  unsigned int numdists_given ;	/**< @brief Whether numdists was given.  */
  unsigned int filename_given ;	/**< @brief Whether filename was given.  */
  unsigned int period_given ;	/**< @brief Whether period was given.  */
  unsigned int only_end_given ;	/**< @brief Whether only-end was given.  */
  unsigned int variance_given ;	/**< @brief Whether variance was given.  */
  unsigned int median_mean_given ;	/**< @brief Whether median_mean was given.  */
  unsigned int partisan_bias_given ;	/**< @brief Whether partisan_bias was given.  */
  unsigned int BG_uniform_given ;     /**< @brief Whether BG_uniform was given.   */
  unsigned int BG_modified_given ;     /**< @brief Whether BG_modified was given.   */
  unsigned int seat_slide_given ;	/**< @brief Whether seat_slide was given.  */
  unsigned int efficiency_gap_given ;	/**< @brief Whether efficiency_gap was given.  */
  unsigned int seats_given ;	/**< @brief Whether seats was given.  */
  unsigned int histogram_given ;	/**< @brief Whether histogram was given.  */
  unsigned int freeze_given ;	/**< @brief Whether freeze was given.  */
  unsigned int counties_given ;	/**< @brief Whether counties was given.  */
  unsigned int poperror_given ;	/**< @brief Whether poperror was given.  */
  unsigned int perimeter_given ;	/**< @brief Whether perimeter was given.  */
  unsigned int polsby_popper_given ;	/**< @brief Whether polsby-popper was given.  */
  unsigned int L1_compactness_given ;	/**< @brief Whether L1-compactness was given.  */
  unsigned int L2_compactness_given ;	/**< @brief Whether L2-compactness was given.  */
  unsigned int inputsvg_filename_given ;	/**< @brief Whether inputsvg-filename was given.  */
  unsigned int svg_filename_given ;	/**< @brief Whether svg-filename was given.  */
  unsigned int precinct_filename_given ;	/**< @brief Whether precinct-filename was given.  */
  unsigned int svg_firstline_given ;	/**< @brief Whether svg-firstline was given.  */
  unsigned int stages_given ;	/**< @brief Whether stages was given.  */
  unsigned int flip_given ;	/**< @brief Whether flip was given.  */
  unsigned int threads_given ;	/**< @brief Whether threads was given.  */
  unsigned int branches_given ;	/**< @brief Whether branches was given.  */
  unsigned int seed_given ;	/**< @brief Whether seed was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];
/** @brief all the lines making the full help output (including hidden options) */
extern const char *gengetopt_args_info_full_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the full help (including hidden options)
 */
void cmdline_parser_print_full_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_statistic_values[];  /**< @brief Possible values for statistic. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CHAINCMDLINE_H */
